[
	{
		"component": "Animate",
		"docComment": "A wrapper for the [`<animate>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate) element.\n\nThe SVG `<animate>` element provides a way to animate an attribute of an element over time."
	},
	{
		"component": "AnimateMotion",
		"docComment": "A wrapper for the [`<animateMotion>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateMotion) element.\n\nThe SVG `<animateMotion>` element provides a way to define how an element moves along a motion path."
	},
	{
		"component": "AnimateTransform",
		"docComment": "A wrapper for the [`<animateTransform>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform) element.\n\nThe `<animateTransform>` element animates a transformation attribute on its target element,\nthereby allowing animations to control translation, scaling, rotation, and/or skewing."
	},
	{
		"component": "Circle",
		"docComment": "A wrapper for the [`<circle>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle) element.\n\nThe `<circle>` SVG element is an [SVG basic shape](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes),\nused to draw circles based on a center point and a radius."
	},
	{
		"component": "Defs",
		"docComment": "A wrapper for the [`<defs>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs) element.\n\nThe `<defs>` element is used to store graphical objects that will be used at a later time.\n\nObjects created inside a `<defs>` element are not rendered directly.\n\nTo display them you have to reference them (with a [`<use>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use) element for example)."
	},
	{
		"component": "Ellipse",
		"docComment": "A wrapper for the [`<ellipse>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse) element.\n\nThe `<ellipse>` element is an SVG basic shape, used to create ellipses based on a center coordinate, and both their x and y radius.\n\n**Note**: Ellipses are unable to specify the exact orientation of the ellipse (if, for example, you wanted to draw an ellipse tilted at a 45 degree angle), but they can be rotated by using the `transform` attribute."
	},
	{
		"component": "G",
		"docComment": "A wrapper for the [`<g>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g) element.\n\nThe `<g>` SVG element is a container used to group other SVG elements.\n\nTransformations applied to the `<g>` element are performed on its child elements, and its attributes are inherited by its children.\nIt can also group multiple elements to be referenced later with the [`<use>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use) element."
	},
	{
		"component": "Line",
		"docComment": "A wrapper for the [`<line>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line) element.\n\nThe `<line>` SVG element is a [basic shape](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes) used to create a line connecting two points."
	},
	{
		"component": "LinearGradient",
		"docComment": "A wrapper for the [`<linearGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient) element.\n\nThe `<linearGradient>` element lets authors define linear gradients to apply to other SVG elements."
	},
	{
		"component": "Marker",
		"docComment": "A wrapper for the [`<marker>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/marker) element.\n\nThe `<marker>` element defines the graphic that is to be used for drawing arrowheads or polymarkers on any of the following:\n\n- `<path>`\n- `<line>`\n- `<polyline>`\n- `<polygon>`\n\nMarkers are attached to shapes using the `markerStart`, `markerMid`, and `markerEnd` properties."
	},
	{
		"component": "Path",
		"docComment": "A wrapper for the [`<path>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path) element.\n\nThe `<path>` SVG element is the generic element to define a shape.\n\nAll the basic shapes can be created with a path element."
	},
	{
		"component": "Polygon",
		"docComment": "A wrapper for the [`<polygon>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon) element.\n\nThe `<polygon>` element defines a closed shape consisting of a set of connected straight line segments.\nThe last point is connected to the first point.\n\nFor open shapes, see the [`<polyline>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline) element."
	},
	{
		"component": "Polyline",
		"docComment": "A wrapper for the [`<polyline>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline) element.\n\nThe `<polyline>` SVG element is a [basic shape](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes) that creates straight lines connecting several points.\n\nTypically a `polyline` is used to create open shapes as the last point doesn't have to be connected to the first point.\n\nFor closed shapes see the [`<polygon>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon) element."
	},
	{
		"component": "RadialGradient",
		"docComment": "A wrapper for the [`<radialGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient) element.\n\nThe `<radialGradient>` element lets authors define radial gradients that can be applied to fill or stroke of graphical elements."
	},
	{
		"component": "Rect",
		"docComment": "A wrapper for the [`<rect>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect) element.\n\nThe `<rect>` element is a [basic SVG shape](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes) that draws rectangles,\ndefined by their position, width, and height."
	},
	{
		"component": "Stop",
		"docComment": "A wrapper for the [`<stop>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop) element.\n\nThe SVG `<stop>` element defines a color and its position to use on a gradient.\n\nThis element is always a child of a [`<linearGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient) or [`<radialGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient) element."
	},
	{
		"component": "Svg",
		"docComment": "A wrapper for the [`<svg>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg) element.\n\nThe `<svg>` element is a container that defines a new coordinate system and [viewport](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox).\n\nIt is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document."
	},
	{
		"component": "Text",
		"docComment": "A wrapper for the [`<text>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text) element.\n\nThe SVG `<text>` element draws a graphics element consisting of text.\nIt's possible to apply a gradient, pattern, clipping path, mask, or filter to `<text>`, like any other SVG graphics element.\n\nIf text is included in SVG not inside of a `<text>` element, it is not rendered.\nThis is different than being hidden by default, as setting the `display` property won't show the text."
	},
	{
		"component": "TextPath",
		"docComment": "A wrapper for the [`<textPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/textPath) element.\n\nTo render text along the shape of a `<path>`, enclose the text in a `<textPath>` element that has an href attribute with a reference to the `<path>` element."
	},
	{
		"component": "TSpan",
		"docComment": "A wrapper for the [`<tspan>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/tspan) element.\n\nThe SVG `<tspan>` element defines a subtext within a `<text>` element or another `<tspan>` element.\n\nIt allows for adjustment of the style and/or position of that subtext as needed."
	},
	{
		"component": "Use",
		"docComment": "A wrapper for the [`<use>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use) element.\n\nThe `<use>` element takes nodes from within the SVG document, and duplicates them somewhere else.\n\nMost attributes on `use` do not override those already on the element referenced by `use`.\n\nOnly the attributes `x`, `y`, `width`, `height` and `href` on the use element will override those set on the referenced element.\n\nHowever, any other attributes not set on the referenced element will be applied to the `use` element."
	}
]
