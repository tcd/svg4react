/// <reference types="react" />
import { Property } from 'csstype';
import * as react from 'react';
import { SVGProps } from 'react';

/**
 * @public
 */
interface SvgPresentationAttributes {
    /**
     * Specifies how an object is aligned along the font baseline with respect to its parent.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/alignment-baseline
     */
    alignmentBaseline?: "auto" | "baseline" | "before-edge" | "text-before-edge" | "middle" | "central" | "after-edge" | "text-after-edge" | "ideographic" | "alphabetic" | "hanging" | "mathematical" | "inherit";
    /**
     * Allows repositioning of the dominant-baseline relative to the dominant-baseline of the parent text content element.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/baseline-shift
     */
    baselineShift?: Property.BaselineShift;
    /**
     * Defines or associates a clipping path with the element it is related to.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/clip-path
     */
    clipPath?: Property.ClipPath;
    /**
     * The `clip-rule` attribute only applies to graphics elements that are contained within a [`<clipPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath) element.
     *
     * The `clip-rule` attribute basically works as the [`fill-rule`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule) attribute, except that it applies to [`<clipPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath) definitions.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/clip-rule
     */
    clipRule?: Property.ClipRule;
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/color
     */
    color?: Property.Color;
    /**
     * Specifies the color space for gradient interpolations, color animations, and alpha compositing.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/color-interpolation
     */
    colorInterpolation?: Property.ColorInterpolation;
    /**
     * Specifies the color space for imaging operations performed via filter effects.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/color-interpolation
     */
    colorInterpolationFilters?: "auto" | "sRGB" | "linearRGB" | "inherit";
    /**
     *
     */
    cursor?: Property.Cursor;
    /**
     * Defines the shape of the path.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d
     */
    d?: string;
    /**
     * Specifies the base writing direction of text.
     */
    direction?: Property.Direction;
    /**
     * Controls the rendering of graphical or container elements.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/direction
     */
    display?: Property.Display;
    /**
     * Defines the baseline used to align the box's text and inline-level contents.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/dominant-baseline
     */
    dominantBaseline?: Property.DominantBaseline;
    /**
     * Defines the color of the inside of the graphical element it applies to.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill
     */
    fill?: Property.Fill;
    /**
     * Defines the opacity of the paint server (color, gradient, pattern, etc.) applied to a shape.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-opacity
     */
    fillOpacity?: Property.Opacity;
    /**
     * Defines the algorithm to use to determine the inside part of a shape.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
     */
    fillRule?: Property.FillRule;
    /**
     * Specifies the filter effects defined by the [`<filter>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter) element that shall be applied to its element.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/filter
     */
    filter?: Property.Filter;
    /**
     * Indicates what color to use to flood the current filter primitive subregion.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/flood-color
     */
    floodColor?: Property.FloodColor;
    /**
     * Indicates the opacity value to use across the current filter primitive subregion.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/flood-opacity
     */
    floodOpacity?: Property.FloodOpacity;
    /**
     * FIXME: mdn vs csstype
     */
    imageRendering?: Property.ImageRendering;
    /**
     * Controls spacing between text characters.
     */
    letterSpacing?: Property.LetterSpacing;
    /**
     * Defines the color of the light source for filter primitives
     * elements [`<feDiffuseLighting>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDiffuseLighting)
     * and [`<feSpecularLighting>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpecularLighting).
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/lighting-color
     */
    lightingColor?: Property.LightingColor;
    /**
     * Defines the arrowhead or polymarker that will be drawn at the final vertex of the given <path> element or basic shape.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/marker-end
     */
    markerEnd?: Property.MarkerEnd;
    /**
     * Defines the arrowhead or polymarker that will be drawn at every vertex other than the first and last vertex of the given <path> element or basic shape.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/marker-mid
     */
    markerMid?: Property.MarkerMid;
    /**
     * Defines the arrowhead or polymarker that will be drawn at the first vertex of the given [`<path>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path) element or basic shape.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/marker-start
     */
    markerStart?: Property.MarkerStart;
    /**
     * Alters the visibility of an element by either masking or clipping the image at specific points.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/mask
     */
    mask?: Property.Mask;
    /**
     * Specifies the transparency of an object or of a group of objects, that is, the degree to which the background behind the element is overlaid.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/opacity
     */
    opacity?: Property.Opacity;
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/overflow
     */
    overflow?: Property.Overflow;
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pointer-events
     */
    pointerEvents?: Property.PointerEvents;
    /**
     * Provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering
     */
    shapeRendering?: Property.ShapeRendering;
    /**
     * Indicates what color to use at a gradient stop.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stop-color
     */
    stopColor?: Property.StopColor;
    /**
     * Defines the opacity of a given color gradient stop.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stop-opacity
     */
    stopOpacity?: Property.StopOpacity;
    /**
     * A presentation attribute defining the color (or any SVG paint servers like gradients or patterns) used to paint the outline of the shape.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke
     */
    stroke?: Property.Stroke;
    /**
     * A presentation attribute defining the pattern of dashes and gaps used to paint the outline of the shape
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray
     */
    strokeDasharray?: Property.StrokeDasharray;
    /**
     * A presentation attribute defining an offset on the rendering of the associated dash array.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset
     */
    strokeDashoffset?: Property.StrokeDashoffset;
    /**
     * A presentation attribute defining the shape to be used at the end of open subpaths when they are stroked.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap
     */
    strokeLinecap?: Property.StrokeLinecap;
    /**
     * A presentation attribute defining the shape to be used at the corners of paths when they are stroked.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin
     */
    strokeLinejoin?: Property.StrokeLinejoin;
    /**
     * A presentation attribute defining a limit on the ratio of the miter length to the `stroke-width` used to draw a miter join.
     * When the limit is exceeded, the join is converted from a miter to a bevel.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit
     */
    strokeMiterlimit?: Property.StrokeMiterlimit;
    /**
     * A presentation attribute defining the opacity of the paint server (*color*, *gradient*, *pattern*, etc.) applied to the stroke of a shape.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-opacity
     */
    strokeOpacity?: Property.StrokeOpacity;
    /**
     * A presentation attribute defining the width of the stroke to be applied to the shape.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-width
     */
    strokeWidth?: Property.StrokeWidth;
    /**
     * Used to align (start-, middle- or end-alignment) a string of pre-formatted text or auto-wrapped text where
     * the wrapping area is determined from the [inline-size](https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size)
     * property relative to a given point.
     *
     * This attribute is not applicable to other types of auto-wrapped text.
     * For those cases you should use `text-align`.
     * For multi-line text, the alignment takes place for each line.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor
     */
    textAnchor?: Property.TextAnchor;
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-decoration
     */
    textDecoration?: Property.TextDecoration;
    /**
     * Provides hints to the renderer about what tradeoffs to make when rendering text.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-rendering
     */
    textRendering?: Property.TextRendering;
    /**
     * Defines a list of transform definitions that are applied to an element and the element's children.
     *
     * As of SVG2, transform is a presentation attribute, meaning it can be used as a CSS property.
     * However, be aware that there are some differences in syntax between the CSS property and the attribute.
     * See the documentation for the CSS property [transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)
     * for the specific syntax to use in that case.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform
     */
    transform?: Property.Transform;
    /**
     * Specifies how the accumulation of the background image is managed.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/unicode-bidi
     */
    unicodeBidi?: Property.UnicodeBidi;
    /**
     * Specifies the vector effect to use when drawing an object.
     * Vector effects are applied before any of the other compositing operations, i.e. filters, masks and clips.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/vector-effect
     */
    vectorEffect?: Property.VectorEffect;
    /**
     * Lets you control the visibility of graphical elements.
     * With a value of `hidden` or `collapse` the current graphics element is invisible.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/visibility
     */
    visibility?: Property.Visibility;
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/word-spacing
     */
    wordSpacing?: Property.WordSpacing;
    /**
     * FIXME: mdn vs csstype
     *
     * Specifies whether the initial inline-progression-direction for a `<text>` element shall be:
     * - *left-to-right*
     * - *right-to-left*
     * - *top-to-bottom*
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/writing-mode
     */
    writingMode?: Property.WritingMode;
}

declare type ValueOf<Obj> = Obj[keyof Obj];
declare type OneOnly<Obj, Key extends keyof Obj> = {
    [key in Exclude<keyof Obj, Key>]: null;
} & Pick<Obj, Key>;
declare type OneOfByKey<Obj> = {
    [key in keyof Obj]: OneOnly<Obj, key>;
};
/**
 * @see [Implement a generic oneOf type with Typescript](https://dev.to/maxime1992/implement-a-generic-oneof-type-with-typescript-22em)
 */
declare type OneOf<Obj> = ValueOf<OneOfByKey<Obj>>;

interface AnimateProps extends SVGProps<SVGAnimateElement> {
}

/**
 * A wrapper for the [`<animate>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate) element.
 *
 * The SVG `<animate>` element provides a way to animate an attribute of an element over time.
 */
declare const Animate: (props: AnimateProps) => JSX.Element;
//# sourceMappingURL=Animate.d.ts.map

interface AnimateMotionProps extends SVGProps<SVGAnimateMotionElement> {
}

/**
 * A wrapper for the [`<animateMotion>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateMotion) element.
 *
 * The SVG `<animateMotion>` element provides a way to define how an element moves along a motion path.
 */
declare const AnimateMotion: (props: AnimateMotionProps) => JSX.Element;
//# sourceMappingURL=AnimateMotion.d.ts.map

interface AnimateTransformProps extends SVGProps<SVGAnimateTransformElement> {
}

/**
 * A wrapper for the [`<animateTransform>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform) element.
 *
 * The `<animateTransform>` element animates a transformation attribute on its target element,
 * thereby allowing animations to control translation, scaling, rotation, and/or skewing.
 */
declare const AnimateTransform: (props: AnimateTransformProps) => JSX.Element;
//# sourceMappingURL=AnimateTransform.d.ts.map

/**
 * @public
 *
 * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle)
 */
declare type CircleAttributes = {
    /**
     * The x-axis coordinate of the center of the circle.
     */
    cx: number | string;
    /**
     * The y-axis coordinate of the center of the circle.
     */
    cy: number | string;
    /**
     * The radius of the circle.
     *
     * A value lower or equal to zero disables rendering of the circle.
     */
    r: number | string;
} & Pick<SvgPresentationAttributes, "clipPath" | "clipRule" | "color" | "colorInterpolation" | "cursor" | "display" | "fill" | "fillOpacity" | "fillRule" | "filter" | "mask" | "opacity" | "pointerEvents" | "shapeRendering" | "stroke" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "transform" | "vectorEffect" | "visibility">;
/**
 * @public
 */
declare type CircleProps = Omit<SVGProps<SVGCircleElement>, keyof CircleAttributes> & CircleAttributes;

/**
 * @public
 *
 * A wrapper for the [`<circle>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle) element.
 *
 * The `<circle>` SVG element is an [SVG basic shape](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes),
 * used to draw circles based on a center point and a radius.
 */
declare const Circle: react.ForwardRefExoticComponent<Pick<CircleProps, "string" | "ideographic" | "alphabetic" | "hanging" | "mathematical" | "clip" | "fill" | "stroke" | "end" | "style" | "clipPath" | "filter" | "mask" | "path" | "clipRule" | "color" | "colorInterpolation" | "cursor" | "display" | "fillOpacity" | "fillRule" | "opacity" | "pointerEvents" | "shapeRendering" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "transform" | "vectorEffect" | "visibility" | "alignmentBaseline" | "baselineShift" | "colorInterpolationFilters" | "d" | "direction" | "dominantBaseline" | "floodColor" | "floodOpacity" | "imageRendering" | "letterSpacing" | "lightingColor" | "markerEnd" | "markerMid" | "markerStart" | "overflow" | "stopColor" | "stopOpacity" | "textAnchor" | "textDecoration" | "textRendering" | "unicodeBidi" | "wordSpacing" | "writingMode" | "cx" | "cy" | "r" | "className" | "height" | "id" | "lang" | "max" | "media" | "method" | "min" | "name" | "target" | "type" | "width" | "role" | "tabIndex" | "crossOrigin" | "accentHeight" | "accumulate" | "additive" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "decelerate" | "descent" | "diffuseConstant" | "divisor" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "filterRes" | "filterUnits" | "focusable" | "fontFamily" | "fontSize" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "href" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "limitingConeAngle" | "local" | "markerHeight" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "radius" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "strikethroughPosition" | "strikethroughThickness" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textLength" | "to" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicode" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "values" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "vMathematical" | "widths" | "x1" | "x2" | "x" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "y" | "yChannelSelector" | "z" | "zoomAndPan" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key"> & react.RefAttributes<SVGCircleElement>>;
//# sourceMappingURL=Circle.d.ts.map

/**
 * @public
 *
 * A wrapper for the [`<defs>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs) element.
 *
 * The `<defs>` element is used to store graphical objects that will be used at a later time.
 *
 * Objects created inside a `<defs>` element are not rendered directly.
 *
 * To display them you have to reference them (with a [`<use>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use) element for example).
 */
declare const Defs: react.ForwardRefExoticComponent<react.RefAttributes<SVGDefsElement>>;
//# sourceMappingURL=Defs.d.ts.map

/**
 * @public
 */
interface DefsProps {
    defs: SVGProps<SVGLinearGradientElement>[];
}

/**
 * @public
 *
 * A wrapper for the [`<g>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g) element.
 *
 * The `<g>` SVG element is a container used to group other SVG elements.
 *
 * Transformations applied to the `<g>` element are performed on its child elements, and its attributes are inherited by its children.
 * It can also group multiple elements to be referenced later with the [`<use>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use) element.
 */
declare const G: react.ForwardRefExoticComponent<Pick<SVGProps<SVGGElement>, "string" | "ideographic" | "alphabetic" | "hanging" | "mathematical" | "clip" | "fill" | "stroke" | "end" | "style" | "clipPath" | "filter" | "mask" | "path" | "clipRule" | "color" | "colorInterpolation" | "cursor" | "display" | "fillOpacity" | "fillRule" | "opacity" | "pointerEvents" | "shapeRendering" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "transform" | "vectorEffect" | "visibility" | "alignmentBaseline" | "baselineShift" | "colorInterpolationFilters" | "d" | "direction" | "dominantBaseline" | "floodColor" | "floodOpacity" | "imageRendering" | "letterSpacing" | "lightingColor" | "markerEnd" | "markerMid" | "markerStart" | "overflow" | "stopColor" | "stopOpacity" | "textAnchor" | "textDecoration" | "textRendering" | "unicodeBidi" | "wordSpacing" | "writingMode" | "cx" | "cy" | "r" | "className" | "height" | "id" | "lang" | "max" | "media" | "method" | "min" | "name" | "target" | "type" | "width" | "role" | "tabIndex" | "crossOrigin" | "accentHeight" | "accumulate" | "additive" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "decelerate" | "descent" | "diffuseConstant" | "divisor" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "filterRes" | "filterUnits" | "focusable" | "fontFamily" | "fontSize" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "href" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "limitingConeAngle" | "local" | "markerHeight" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "radius" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "strikethroughPosition" | "strikethroughThickness" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textLength" | "to" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicode" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "values" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "vMathematical" | "widths" | "x1" | "x2" | "x" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "y" | "yChannelSelector" | "z" | "zoomAndPan" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key"> & react.RefAttributes<SVGGElement>>;
//# sourceMappingURL=G.d.ts.map

/**
 * @public
 *
 * @see [MDN `<stop>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop)
 */
declare type StopAttributes = {
    /**
     * Defines where the gradient stop is placed along the gradient vector.
     *
     * @defaultValue 0
     */
    offset?: string | number;
    /**
     * The color attribute is used to provide a potential indirect value (currentcolor) for
     * the `fill`, `stroke`, `stop-color`, `flood-color`, and `lighting-color` attributes.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/color
     */
    color?: string;
    /**
     * lets you control the rendering of graphical or container elements.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/display
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/display
     *
     * @defaultValue "inline"
     */
    display?: Property.Display;
    /**
     * Defines the color of the gradient stop.
     * It can be used as a CSS property.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stop-color
     *
     * @defaultValue "black"
     */
    stopColor?: string;
    /**
     * Defines the opacity of the gradient stop.
     * It can be used as a CSS property.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stop-opacity
     *
     * @defaultValue 1
     */
    stopOpacity?: number;
    /**
     * Lets you control the visibility of graphical elements.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/visibility
     */
    visibility?: Property.Visibility;
};
/**
 * @public
 */
declare type StopProps = Omit<SVGProps<SVGStopElement>, keyof StopAttributes> & StopAttributes;

/**
 * @public
 *
 * @see [MDN `<stop>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop)
 */
declare const Stop: (props: StopProps) => JSX.Element;
//# sourceMappingURL=Stop.d.ts.map

/**
 * @public
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient
 */
declare type LinearGradientAttributes = {
    /**
     * Defines the coordinate system for attributes `x1`, `x2`, `y1`, `y2`.
     *
     * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/gradientUnits)
     *
     * @defaultValue "objectBoundingBox"
     */
    gradientUnits?: "userSpaceOnUse" | "objectBoundingBox";
    /**
     * This attribute provides additional [transformation](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform) to the gradient coordinate system.
     *
     * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/gradientTransform)
     */
    gradientTransform?: string;
    /**
     * This attribute defines a reference to another `<linearGradient>` element that will be used as a template.
     *
     * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/href)
     */
    href?: string;
    /**
     * This attribute indicates how the gradient behaves if it starts or ends inside the bounds of the shape containing the gradient.
     *
     * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/spreadMethod)
     *
     * @defaultValue "pad"
     */
    spreadMethod?: "pad" | "reflect" | "repeat";
    /**
     * This attribute defines the x coordinate of the starting point of the vector gradient along which the linear gradient is drawn.
     *
     * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/x1)
     *
     * @defaultValue "0%"
     */
    x1?: string | number;
    /**
     * This attribute defines the x coordinate of the ending point of the vector gradient along which the linear gradient is drawn.
     *
     * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/x2)
     *
     * @defaultValue "100%"
     */
    x2?: string | number;
    /**
     * This attribute defines the y coordinate of the starting point of the vector gradient along which the linear gradient is drawn.
     *
     * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/y1)
     *
     * @defaultValue "0%"
     */
    y1?: string | number;
    /**
     * This attribute defines the y coordinate of the ending point of the vector gradient along which the linear gradient is drawn.
     *
     * @see [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/y2)
     *
     * @defaultValue "0%"
     */
    y2?: string | number;
} & Pick<SvgPresentationAttributes, "clipPath" | "clipRule" | "color" | "colorInterpolation" | "cursor" | "display" | "fill" | "fillOpacity" | "fillRule" | "filter" | "mask" | "opacity" | "pointerEvents" | "shapeRendering" | "stroke" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "transform" | "vectorEffect" | "visibility">;
/**
 * @public
 *
 * All properties aside from `id` and `stops` & `className` are animatable.
 */
declare type LinearGradientProps = SVGProps<SVGLinearGradientElement> & LinearGradientAttributes & {
    id: string;
    className?: string;
    stops?: StopProps[];
};

/**
 * @public
 *
 * ## Reference
 *
 * - [MDN `<stop>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop)
 */
declare const LinearGradient: (props: LinearGradientProps) => JSX.Element;
//# sourceMappingURL=LinearGradient.d.ts.map

declare type M = [x: number, y: number];
declare type m = [dx: number, dy: number];
declare type L = [x: number, y: number];
declare type l = [dx: number, dy: number];
declare type H = number;
declare type h = number;
declare type V = number;
declare type v = number;
declare type C = [
    x1: number,
    y1: number,
    x2: number,
    y2: number,
    x: number,
    y: number
];
declare type c = [
    dx1: number,
    dy1: number,
    dx2: number,
    dy2: number,
    dx: number,
    dy: number
];
declare type S = [
    x2: number,
    y2: number,
    x: number,
    y: number
];
declare type s = [
    dx2: number,
    dy2: number,
    dx: number,
    dy: number
];
declare type Q = [
    x1: number,
    y1: number,
    x: number,
    y: number
];
declare type q = [
    dx1: number,
    dy1: number,
    dx: number,
    dy: number
];
declare type T = [x: number, y: number];
declare type t = [dx: number, dy: number];
declare type A = [
    rx: number,
    ry: number,
    angle: number,
    largeArcFlag: 0 | 1,
    sweepFlag: 0 | 1,
    x: number,
    y: number
];
declare type a = [
    rx: number,
    ry: number,
    angle: number,
    largeArcFlag: 0 | 1,
    sweepFlag: 0 | 1,
    x: number,
    y: number
];
declare type Z = null | undefined;
declare type z = null | undefined;

/**
 * @public
 */
declare enum DrawToCommandNames {
    M = "moveto_absolute",
    m = "moveto_relative",
    L = "lineto_absolute",
    l = "lineto_relative",
    H = "horizontal_lineto_absolute",
    h = "horizontal_lineto_relative",
    V = "vertical_lineto_absolute",
    v = "vertical_lineto_relative",
    C = "curveto_absolute",
    c = "curveto_relative",
    S = "smooth_curveto_absolute",
    s = "smooth_curveto_relative",
    Q = "quadratic_bezier_curveto_absolute",
    q = "quadratic_bezier_curveto_relative",
    T = "smooth_quadratic_bezier_curveto_absolute",
    t = "smooth_quadratic_bezier_curveto_relative",
    A = "elliptical_arc_absolute",
    a = "elliptical_arc_relative",
    Z = "closepath",
    z = "closepath"
}
/**
 * @public
 */
declare type DrawToCommandName = keyof typeof DrawToCommandNames;
/**
 * @public
 */
declare type TCmdProp<TCmd extends DrawToCommandName, TArgs> = [
    cmd: TCmd,
    args: TArgs[]
];
/**
 * @public
 */
declare type CmdProp = TCmdProp<"M", M> | TCmdProp<"m", m> | TCmdProp<"L", L> | TCmdProp<"l", l> | TCmdProp<"H", H> | TCmdProp<"h", h> | TCmdProp<"V", V> | TCmdProp<"v", v> | TCmdProp<"C", C> | TCmdProp<"c", c> | TCmdProp<"S", S> | TCmdProp<"s", s> | TCmdProp<"Q", Q> | TCmdProp<"q", q> | TCmdProp<"T", T> | TCmdProp<"t", t> | TCmdProp<"A", A> | TCmdProp<"a", a> | TCmdProp<"Z", Z> | TCmdProp<"z", z>;
/**
 * @public
 */
declare type PathProps = {
    id?: string;
    fill?: any;
    stroke?: any;
} & ({
    commands: CmdProp[] | null;
} | {
    d: string | null;
});

/**
 * @public
 *
 * A wrapper for the [`<path>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path) element.
 *
 * The `<path>` SVG element is the generic element to define a shape.
 *
 * All the basic shapes can be created with a path element.
 */
declare const Path: react.ForwardRefExoticComponent<PathProps & react.RefAttributes<SVGPathElement>>;
//# sourceMappingURL=Path.d.ts.map

interface RectProps extends SVGProps<SVGRectElement> {
}

/**
 * A wrapper for the [`<rect>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect) element.
 *
 * The `<rect>` element is a [basic SVG shape](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes) that draws rectangles,
 * defined by their position, width, and height.
 *
 * The rectangles may have their corners rounded.
 */
declare const Rect: (props: RectProps) => JSX.Element;
//# sourceMappingURL=Rect.d.ts.map

interface SvgProps extends SVGProps<SVGSVGElement> {
    /**
     * Assigned to both `width` and `height`
     */
    size?: string;
}

/**
 * @public
 *
 * A wrapper for the [`<svg>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg) element.
 *
 * The `<svg>` element is a container that defines a new coordinate system and [viewport](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox).
 *
 * It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document.
 */
declare const Svg: react.ForwardRefExoticComponent<Pick<SvgProps, "string" | "ideographic" | "alphabetic" | "hanging" | "mathematical" | "clip" | "fill" | "stroke" | "end" | "style" | "clipPath" | "filter" | "mask" | "path" | "clipRule" | "color" | "colorInterpolation" | "cursor" | "display" | "fillOpacity" | "fillRule" | "opacity" | "pointerEvents" | "shapeRendering" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "transform" | "vectorEffect" | "visibility" | "alignmentBaseline" | "baselineShift" | "colorInterpolationFilters" | "d" | "direction" | "dominantBaseline" | "floodColor" | "floodOpacity" | "imageRendering" | "letterSpacing" | "lightingColor" | "markerEnd" | "markerMid" | "markerStart" | "overflow" | "stopColor" | "stopOpacity" | "textAnchor" | "textDecoration" | "textRendering" | "unicodeBidi" | "wordSpacing" | "writingMode" | "cx" | "cy" | "r" | "className" | "height" | "id" | "lang" | "max" | "media" | "method" | "min" | "name" | "target" | "type" | "width" | "role" | "tabIndex" | "crossOrigin" | "accentHeight" | "accumulate" | "additive" | "allowReorder" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "decelerate" | "descent" | "diffuseConstant" | "divisor" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "filterRes" | "filterUnits" | "focusable" | "fontFamily" | "fontSize" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "horizAdvX" | "horizOriginX" | "href" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "limitingConeAngle" | "local" | "markerHeight" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mode" | "numOctaves" | "offset" | "operator" | "order" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "radius" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "strikethroughPosition" | "strikethroughThickness" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textLength" | "to" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicode" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "values" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "vMathematical" | "widths" | "x1" | "x2" | "x" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "y" | "yChannelSelector" | "z" | "zoomAndPan" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key" | "size"> & react.RefAttributes<SVGSVGElement>>;
//# sourceMappingURL=Svg.d.ts.map

export { Animate, AnimateMotion, AnimateMotionProps, AnimateProps, AnimateTransform, AnimateTransformProps, Circle, CircleAttributes, CircleProps, CmdProp, Defs, DefsProps, DrawToCommandName, DrawToCommandNames, G, LinearGradient, LinearGradientAttributes, LinearGradientProps, OneOf, Path, PathProps, Rect, RectProps, Stop, StopAttributes, StopProps, Svg, SvgPresentationAttributes, SvgProps, TCmdProp };
